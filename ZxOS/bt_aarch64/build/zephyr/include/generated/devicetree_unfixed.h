/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   qemu_cortex_a53.dts.pre.tmp
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /psci
 *   4   /soc
 *   5   /soc/interrupt-controller@8000000
 *   6   /timer
 *   7   /cpus
 *   8   /cpus/cpu@0
 *   9   /cpus/cpu@1
 *   10  /soc/flash@0
 *   11  /soc/memory@40000000
 *   12  /apb-pclk
 *   13  /soc/uart@9000000
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_timer) fn(DT_N_S_apb_pclk) fn(DT_N_S_psci)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_timer, __VA_ARGS__) fn(DT_N_S_apb_pclk, __VA_ARGS__) fn(DT_N_S_psci, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_timer) fn(DT_N_S_apb_pclk) fn(DT_N_S_psci) 
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_timer, __VA_ARGS__) fn(DT_N_S_apb_pclk, __VA_ARGS__) fn(DT_N_S_psci, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /psci */ \
	4, /* /soc */ \
	6, /* /timer */ \
	7, /* /cpus */ \
	12, /* /apb-pclk */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_qemu_arm_cortex_a53 DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_qemu_arm_cortex_a53 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"qemu,arm-cortex-a53"}
#define DT_N_P_compatible_IDX_0 "qemu,arm-cortex-a53"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /psci
 *
 * Node identifier: DT_N_S_psci
 *
 * Binding (compatible = arm,psci-0.2):
 *   $ZEPHYR_BASE/dts/bindings/pm_cpu_ops/arm,psci.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_psci_PATH "/psci"

/* Node's name with unit-address: */
#define DT_N_S_psci_FULL_NAME "psci"

/* Node parent (/) identifier: */
#define DT_N_S_psci_PARENT DT_N
#define DT_N_S_psci_FOREACH_CHILD(fn) 
#define DT_N_S_psci_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_psci_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_psci_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_psci_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_psci_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_psci_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_psci_EXISTS 1
#define DT_N_INST_0_arm_psci_0_2 DT_N_S_psci

/* Macros for properties that are special in the specification: */
#define DT_N_S_psci_REG_NUM 0
#define DT_N_S_psci_IRQ_NUM 0
#define DT_N_S_psci_COMPAT_MATCHES_arm_psci_0_2 1
#define DT_N_S_psci_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_psci_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_psci_P_label "PSCI"
#define DT_N_S_psci_P_label_STRING_TOKEN PSCI
#define DT_N_S_psci_P_label_STRING_UPPER_TOKEN PSCI
#define DT_N_S_psci_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_psci, label, 0) \
	fn(DT_N_S_psci, label, 1) \
	fn(DT_N_S_psci, label, 2) \
	fn(DT_N_S_psci, label, 3)
#define DT_N_S_psci_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_psci, label, 0, __VA_ARGS__) \
	fn(DT_N_S_psci, label, 1, __VA_ARGS__) \
	fn(DT_N_S_psci, label, 2, __VA_ARGS__) \
	fn(DT_N_S_psci, label, 3, __VA_ARGS__)
#define DT_N_S_psci_P_label_EXISTS 1
#define DT_N_S_psci_P_method "hvc"
#define DT_N_S_psci_P_method_STRING_TOKEN hvc
#define DT_N_S_psci_P_method_STRING_UPPER_TOKEN HVC
#define DT_N_S_psci_P_method_ENUM_IDX 1
#define DT_N_S_psci_P_method_ENUM_TOKEN hvc
#define DT_N_S_psci_P_method_ENUM_UPPER_TOKEN HVC
#define DT_N_S_psci_P_method_FOREACH_PROP_ELEM(fn) fn(DT_N_S_psci, method, 0) \
	fn(DT_N_S_psci, method, 1) \
	fn(DT_N_S_psci, method, 2)
#define DT_N_S_psci_P_method_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_psci, method, 0, __VA_ARGS__) \
	fn(DT_N_S_psci, method, 1, __VA_ARGS__) \
	fn(DT_N_S_psci, method, 2, __VA_ARGS__)
#define DT_N_S_psci_P_method_EXISTS 1
#define DT_N_S_psci_P_compatible {"arm,psci-0.2"}
#define DT_N_S_psci_P_compatible_IDX_0 "arm,psci-0.2"
#define DT_N_S_psci_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_psci_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_psci, compatible, 0)
#define DT_N_S_psci_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_psci, compatible, 0, __VA_ARGS__)
#define DT_N_S_psci_P_compatible_LEN 1
#define DT_N_S_psci_P_compatible_EXISTS 1
#define DT_N_S_psci_P_wakeup_source 0
#define DT_N_S_psci_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_8000000) fn(DT_N_S_soc_S_uart_9000000) fn(DT_N_S_soc_S_flash_0) fn(DT_N_S_soc_S_memory_40000000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_8000000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_9000000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_memory_40000000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_8000000) fn(DT_N_S_soc_S_uart_9000000) fn(DT_N_S_soc_S_flash_0) fn(DT_N_S_soc_S_memory_40000000) 
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_8000000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_9000000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_memory_40000000, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	5, /* /soc/interrupt-controller@8000000 */ \
	10, /* /soc/flash@0 */ \
	11, /* /soc/memory@40000000 */ \
	13, /* /soc/uart@9000000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@8000000
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_8000000
 *
 * Binding (compatible = arm,gic):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/arm,gic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_8000000_PATH "/soc/interrupt-controller@8000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_8000000_FULL_NAME "interrupt-controller@8000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_8000000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_interrupt_controller_8000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_8000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_8000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_8000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_8000000_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_8000000_REQUIRES_ORDS \
	4, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_8000000_SUPPORTS_ORDS \
	6, /* /timer */ \
	13, /* /soc/uart@9000000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_8000000_EXISTS 1
#define DT_N_INST_0_arm_gic DT_N_S_soc_S_interrupt_controller_8000000
#define DT_N_NODELABEL_gic  DT_N_S_soc_S_interrupt_controller_8000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_8000000_REG_NUM 2
#define DT_N_S_soc_S_interrupt_controller_8000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_REG_IDX_0_VAL_ADDRESS 134217728 /* 0x8000000 */
#define DT_N_S_soc_S_interrupt_controller_8000000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_interrupt_controller_8000000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_REG_IDX_1_VAL_ADDRESS 134873088 /* 0x80a0000 */
#define DT_N_S_soc_S_interrupt_controller_8000000_REG_IDX_1_VAL_SIZE 16121856 /* 0xf60000 */
#define DT_N_S_soc_S_interrupt_controller_8000000_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_8000000_COMPAT_MATCHES_arm_gic 1
#define DT_N_S_soc_S_interrupt_controller_8000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_8000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg {134217728 /* 0x8000000 */, 65536 /* 0x10000 */, 134873088 /* 0x80a0000 */, 16121856 /* 0xf60000 */}
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_IDX_0 134217728
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_IDX_2 134873088
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_IDX_3 16121856
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_8000000, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, reg, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, reg, 2) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, reg, 3)
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_8000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_8000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_label "GIC"
#define DT_N_S_soc_S_interrupt_controller_8000000_P_label_STRING_TOKEN GIC
#define DT_N_S_soc_S_interrupt_controller_8000000_P_label_STRING_UPPER_TOKEN GIC
#define DT_N_S_soc_S_interrupt_controller_8000000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_8000000, label, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, label, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, label, 2)
#define DT_N_S_soc_S_interrupt_controller_8000000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_8000000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, label, 2, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_8000000_P_label_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status "okay"
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_8000000, status, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, status, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, status, 2) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, status, 3)
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_8000000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_8000000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_8000000_P_status_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_compatible {"arm,gic"}
#define DT_N_S_soc_S_interrupt_controller_8000000_P_compatible_IDX_0 "arm,gic"
#define DT_N_S_soc_S_interrupt_controller_8000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_8000000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_8000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_8000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_8000000_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_8000000_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_8000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /timer
 *
 * Node identifier: DT_N_S_timer
 *
 * Binding (compatible = arm,armv8-timer):
 *   $ZEPHYR_BASE/dts/bindings/timer/arm,armv8-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_timer_PATH "/timer"

/* Node's name with unit-address: */
#define DT_N_S_timer_FULL_NAME "timer"

/* Node parent (/) identifier: */
#define DT_N_S_timer_PARENT DT_N
#define DT_N_S_timer_FOREACH_CHILD(fn) 
#define DT_N_S_timer_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_timer_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_timer_REQUIRES_ORDS \
	0, /* / */ \
	5, /* /soc/interrupt-controller@8000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_timer_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_timer_EXISTS 1
#define DT_N_INST_0_arm_armv8_timer DT_N_S_timer

/* Macros for properties that are special in the specification: */
#define DT_N_S_timer_REG_NUM 0
#define DT_N_S_timer_IRQ_NUM 4
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_irq 29
#define DT_N_S_timer_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_irq 30
#define DT_N_S_timer_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_irq 27
#define DT_N_S_timer_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_2_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_irq 26
#define DT_N_S_timer_IRQ_IDX_3_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_3_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_3_VAL_priority_EXISTS 1
#define DT_N_S_timer_COMPAT_MATCHES_arm_armv8_timer 1
#define DT_N_S_timer_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_timer_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_timer_P_interrupts {1 /* 0x1 */, 13 /* 0xd */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 14 /* 0xe */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 11 /* 0xb */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 10 /* 0xa */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_timer_P_interrupts_IDX_0 1
#define DT_N_S_timer_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_1 13
#define DT_N_S_timer_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_2 2
#define DT_N_S_timer_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_3 160
#define DT_N_S_timer_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_4 1
#define DT_N_S_timer_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_5 14
#define DT_N_S_timer_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_6 2
#define DT_N_S_timer_P_interrupts_IDX_6_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_7 160
#define DT_N_S_timer_P_interrupts_IDX_7_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_8 1
#define DT_N_S_timer_P_interrupts_IDX_8_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_9 11
#define DT_N_S_timer_P_interrupts_IDX_9_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_10 2
#define DT_N_S_timer_P_interrupts_IDX_10_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_11 160
#define DT_N_S_timer_P_interrupts_IDX_11_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_12 1
#define DT_N_S_timer_P_interrupts_IDX_12_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_13 10
#define DT_N_S_timer_P_interrupts_IDX_13_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_14 2
#define DT_N_S_timer_P_interrupts_IDX_14_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_15 160
#define DT_N_S_timer_P_interrupts_IDX_15_EXISTS 1
#define DT_N_S_timer_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_timer, interrupts, 0) \
	fn(DT_N_S_timer, interrupts, 1) \
	fn(DT_N_S_timer, interrupts, 2) \
	fn(DT_N_S_timer, interrupts, 3) \
	fn(DT_N_S_timer, interrupts, 4) \
	fn(DT_N_S_timer, interrupts, 5) \
	fn(DT_N_S_timer, interrupts, 6) \
	fn(DT_N_S_timer, interrupts, 7) \
	fn(DT_N_S_timer, interrupts, 8) \
	fn(DT_N_S_timer, interrupts, 9) \
	fn(DT_N_S_timer, interrupts, 10) \
	fn(DT_N_S_timer, interrupts, 11) \
	fn(DT_N_S_timer, interrupts, 12) \
	fn(DT_N_S_timer, interrupts, 13) \
	fn(DT_N_S_timer, interrupts, 14) \
	fn(DT_N_S_timer, interrupts, 15)
#define DT_N_S_timer_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_timer, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 3, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 4, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 5, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 6, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 7, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 8, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 9, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 10, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 11, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 12, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 13, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 14, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 15, __VA_ARGS__)
#define DT_N_S_timer_P_interrupts_EXISTS 1
#define DT_N_S_timer_P_label "arch_timer"
#define DT_N_S_timer_P_label_STRING_TOKEN arch_timer
#define DT_N_S_timer_P_label_STRING_UPPER_TOKEN ARCH_TIMER
#define DT_N_S_timer_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_timer, label, 0) \
	fn(DT_N_S_timer, label, 1) \
	fn(DT_N_S_timer, label, 2) \
	fn(DT_N_S_timer, label, 3) \
	fn(DT_N_S_timer, label, 4) \
	fn(DT_N_S_timer, label, 5) \
	fn(DT_N_S_timer, label, 6) \
	fn(DT_N_S_timer, label, 7) \
	fn(DT_N_S_timer, label, 8) \
	fn(DT_N_S_timer, label, 9)
#define DT_N_S_timer_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_timer, label, 0, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 1, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 2, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 3, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 4, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 5, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 6, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 7, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 8, __VA_ARGS__) \
	fn(DT_N_S_timer, label, 9, __VA_ARGS__)
#define DT_N_S_timer_P_label_EXISTS 1
#define DT_N_S_timer_P_compatible {"arm,armv8-timer"}
#define DT_N_S_timer_P_compatible_IDX_0 "arm,armv8-timer"
#define DT_N_S_timer_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_timer, compatible, 0)
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_timer_P_compatible_LEN 1
#define DT_N_S_timer_P_compatible_EXISTS 1
#define DT_N_S_timer_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_8000000
#define DT_N_S_timer_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_8000000
#define DT_N_S_timer_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_8000000
#define DT_N_S_timer_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_timer_P_interrupt_parent_LEN 1
#define DT_N_S_timer_P_interrupt_parent_EXISTS 1
#define DT_N_S_timer_P_wakeup_source 0
#define DT_N_S_timer_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) 
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	8, /* /cpus/cpu@0 */ \
	9, /* /cpus/cpu@1 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-a53):
 *   $ZEPHYR_BASE/dts/bindings/cpu/arm,cortex-a53.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	7, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_a53 DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_a53 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-a53"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-a53"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@1
 *
 * Node identifier: DT_N_S_cpus_S_cpu_1
 *
 * Binding (compatible = arm,cortex-a53):
 *   $ZEPHYR_BASE/dts/bindings/cpu/arm,cortex-a53.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_1_PATH "/cpus/cpu@1"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_1_FULL_NAME "cpu@1"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_1_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_1_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_1_REQUIRES_ORDS \
	7, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_1_EXISTS 1
#define DT_N_INST_1_arm_cortex_a53 DT_N_S_cpus_S_cpu_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_1_REG_NUM 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_cpus_S_cpu_1_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_1_COMPAT_MATCHES_arm_cortex_a53 1
#define DT_N_S_cpus_S_cpu_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_1_P_compatible {"arm,cortex-a53"}
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0 "arm,cortex-a53"
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg {1 /* 0x1 */}
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0 1
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, reg, 0)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_0
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_0_PATH "/soc/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_0_PARENT DT_N_S_soc
#define DT_N_S_soc_S_flash_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_0_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_0_REQUIRES_ORDS \
	4, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_0_EXISTS 1
#define DT_N_INST_0_cfi_flash DT_N_S_soc_S_flash_0
#define DT_N_NODELABEL_flash0 DT_N_S_soc_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_0_REG_IDX_0_VAL_SIZE 67108864 /* 0x4000000 */
#define DT_N_S_soc_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_0_COMPAT_MATCHES_cfi_flash 1
#define DT_N_S_soc_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_0_P_compatible {"cfi-flash"}
#define DT_N_S_soc_S_flash_0_P_compatible_IDX_0 "cfi-flash"
#define DT_N_S_soc_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_0_P_reg {0 /* 0x0 */, 67108864 /* 0x4000000 */}
#define DT_N_S_soc_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_0_P_reg_IDX_1 67108864
#define DT_N_S_soc_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_0, reg, 0) \
	fn(DT_N_S_soc_S_flash_0, reg, 1)
#define DT_N_S_soc_S_flash_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_0_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/memory@40000000
 *
 * Node identifier: DT_N_S_soc_S_memory_40000000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_40000000_PATH "/soc/memory@40000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_40000000_FULL_NAME "memory@40000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_40000000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_memory_40000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_40000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_40000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_40000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_40000000_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_40000000_REQUIRES_ORDS \
	4, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_40000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_40000000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_memory_40000000
#define DT_N_NODELABEL_sram0  DT_N_S_soc_S_memory_40000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_40000000_REG_NUM 1
#define DT_N_S_soc_S_memory_40000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_40000000_REG_IDX_0_VAL_ADDRESS 1073741824 /* 0x40000000 */
#define DT_N_S_soc_S_memory_40000000_REG_IDX_0_VAL_SIZE 134217728 /* 0x8000000 */
#define DT_N_S_soc_S_memory_40000000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_40000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_40000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_40000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_40000000_P_reg {1073741824 /* 0x40000000 */, 134217728 /* 0x8000000 */}
#define DT_N_S_soc_S_memory_40000000_P_reg_IDX_0 1073741824
#define DT_N_S_soc_S_memory_40000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_40000000_P_reg_IDX_1 134217728
#define DT_N_S_soc_S_memory_40000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_40000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_40000000, reg, 0) \
	fn(DT_N_S_soc_S_memory_40000000, reg, 1)
#define DT_N_S_soc_S_memory_40000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_40000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_memory_40000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_40000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_40000000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_40000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_40000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_40000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_40000000, compatible, 0)
#define DT_N_S_soc_S_memory_40000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_40000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_40000000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_40000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_40000000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_40000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /apb-pclk
 *
 * Node identifier: DT_N_S_apb_pclk
 *
 * Binding (compatible = fixed-clock):
 *   $ZEPHYR_BASE/dts/bindings/clock/fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_apb_pclk_PATH "/apb-pclk"

/* Node's name with unit-address: */
#define DT_N_S_apb_pclk_FULL_NAME "apb-pclk"

/* Node parent (/) identifier: */
#define DT_N_S_apb_pclk_PARENT DT_N
#define DT_N_S_apb_pclk_FOREACH_CHILD(fn) 
#define DT_N_S_apb_pclk_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_apb_pclk_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_apb_pclk_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_apb_pclk_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_apb_pclk_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_apb_pclk_SUPPORTS_ORDS \
	13, /* /soc/uart@9000000 */

/* Existence and alternate IDs: */
#define DT_N_S_apb_pclk_EXISTS 1
#define DT_N_INST_0_fixed_clock DT_N_S_apb_pclk
#define DT_N_NODELABEL_uartclk  DT_N_S_apb_pclk

/* Macros for properties that are special in the specification: */
#define DT_N_S_apb_pclk_REG_NUM 0
#define DT_N_S_apb_pclk_IRQ_NUM 0
#define DT_N_S_apb_pclk_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_apb_pclk_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_apb_pclk_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_apb_pclk_P_clock_frequency 24000000
#define DT_N_S_apb_pclk_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /soc/uart@9000000
 *
 * Node identifier: DT_N_S_soc_S_uart_9000000
 *
 * Binding (compatible = arm,pl011):
 *   $ZEPHYR_BASE/dts/bindings/serial/arm,pl011.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_9000000_PATH "/soc/uart@9000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_9000000_FULL_NAME "uart@9000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_9000000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_9000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_9000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_9000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_9000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_9000000_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_9000000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@8000000 */ \
	12, /* /apb-pclk */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_9000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_9000000_EXISTS 1
#define DT_N_INST_0_arm_pl011 DT_N_S_soc_S_uart_9000000
#define DT_N_NODELABEL_uart0  DT_N_S_soc_S_uart_9000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_9000000_REG_NUM 1
#define DT_N_S_soc_S_uart_9000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_REG_IDX_0_VAL_ADDRESS 150994944 /* 0x9000000 */
#define DT_N_S_soc_S_uart_9000000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_uart_9000000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_type 0
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_irq 33
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_NAME_irq_0_VAL_type DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_type
#define DT_N_S_soc_S_uart_9000000_IRQ_NAME_irq_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_NAME_irq_0_VAL_irq DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_uart_9000000_IRQ_NAME_irq_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_NAME_irq_0_VAL_flags DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_flags
#define DT_N_S_soc_S_uart_9000000_IRQ_NAME_irq_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_IRQ_NAME_irq_0_VAL_priority DT_N_S_soc_S_uart_9000000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_uart_9000000_IRQ_NAME_irq_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_COMPAT_MATCHES_arm_pl011 1
#define DT_N_S_soc_S_uart_9000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_9000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_9000000_P_reg {150994944 /* 0x9000000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_uart_9000000_P_reg_IDX_0 150994944
#define DT_N_S_soc_S_uart_9000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_uart_9000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_9000000, reg, 0) \
	fn(DT_N_S_soc_S_uart_9000000, reg, 1)
#define DT_N_S_soc_S_uart_9000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_9000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_9000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_interrupts {0 /* 0x0 */, 1 /* 0x1 */, 2 /* 0x2 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_9000000_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_uart_9000000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_interrupts_IDX_1 1
#define DT_N_S_soc_S_uart_9000000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_interrupts_IDX_2 2
#define DT_N_S_soc_S_uart_9000000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_interrupts_IDX_3 0
#define DT_N_S_soc_S_uart_9000000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_9000000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_9000000, interrupts, 1) \
	fn(DT_N_S_soc_S_uart_9000000, interrupts, 2) \
	fn(DT_N_S_soc_S_uart_9000000, interrupts, 3)
#define DT_N_S_soc_S_uart_9000000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_9000000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_9000000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_current_speed 115200
#define DT_N_S_soc_S_uart_9000000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_label "UART_0"
#define DT_N_S_soc_S_uart_9000000_P_label_STRING_TOKEN UART_0
#define DT_N_S_soc_S_uart_9000000_P_label_STRING_UPPER_TOKEN UART_0
#define DT_N_S_soc_S_uart_9000000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_9000000, label, 0) \
	fn(DT_N_S_soc_S_uart_9000000, label, 1) \
	fn(DT_N_S_soc_S_uart_9000000, label, 2) \
	fn(DT_N_S_soc_S_uart_9000000, label, 3) \
	fn(DT_N_S_soc_S_uart_9000000, label, 4) \
	fn(DT_N_S_soc_S_uart_9000000, label, 5)
#define DT_N_S_soc_S_uart_9000000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_9000000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_9000000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_9000000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_status "okay"
#define DT_N_S_soc_S_uart_9000000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_9000000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_9000000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_9000000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_9000000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_9000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_9000000, status, 0) \
	fn(DT_N_S_soc_S_uart_9000000, status, 1) \
	fn(DT_N_S_soc_S_uart_9000000, status, 2) \
	fn(DT_N_S_soc_S_uart_9000000, status, 3)
#define DT_N_S_soc_S_uart_9000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_9000000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_9000000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_9000000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_compatible {"arm,pl011"}
#define DT_N_S_soc_S_uart_9000000_P_compatible_IDX_0 "arm,pl011"
#define DT_N_S_soc_S_uart_9000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_9000000, compatible, 0)
#define DT_N_S_soc_S_uart_9000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_9000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_9000000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_9000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_interrupt_names {"irq_0"}
#define DT_N_S_soc_S_uart_9000000_P_interrupt_names_IDX_0 "irq_0"
#define DT_N_S_soc_S_uart_9000000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_9000000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_9000000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_9000000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_9000000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_uart_9000000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_clocks_IDX_0_PH DT_N_S_apb_pclk
#define DT_N_S_soc_S_uart_9000000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_9000000, clocks, 0)
#define DT_N_S_soc_S_uart_9000000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_9000000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_9000000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_9000000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_9000000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_9000000_P_wakeup_source_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_sram              DT_N_S_soc_S_memory_40000000
#define DT_CHOSEN_zephyr_sram_EXISTS       1
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_uart_9000000
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_uart_9000000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1
#define DT_CHOSEN_zephyr_flash             DT_N_S_soc_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS      1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_qemu_arm_cortex_a53 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_arm_gic 1
#define DT_COMPAT_HAS_OKAY_arm_pl011 1
#define DT_COMPAT_HAS_OKAY_cfi_flash 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_a53 1
#define DT_COMPAT_HAS_OKAY_arm_armv8_timer 1
#define DT_COMPAT_HAS_OKAY_fixed_clock 1
#define DT_COMPAT_HAS_OKAY_arm_psci_0_2 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_qemu_arm_cortex_a53_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_arm_gic_NUM_OKAY 1
#define DT_N_INST_arm_pl011_NUM_OKAY 1
#define DT_N_INST_cfi_flash_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_arm_cortex_a53_NUM_OKAY 2
#define DT_N_INST_arm_armv8_timer_NUM_OKAY 1
#define DT_N_INST_fixed_clock_NUM_OKAY 1
#define DT_N_INST_arm_psci_0_2_NUM_OKAY 1
#define DT_FOREACH_OKAY_qemu_arm_cortex_a53(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_qemu_arm_cortex_a53(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_qemu_arm_cortex_a53(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_qemu_arm_cortex_a53(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_gic(fn) fn(DT_N_S_soc_S_interrupt_controller_8000000)
#define DT_FOREACH_OKAY_VARGS_arm_gic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_8000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_gic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_gic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_pl011(fn) fn(DT_N_S_soc_S_uart_9000000)
#define DT_FOREACH_OKAY_VARGS_arm_pl011(fn, ...) fn(DT_N_S_soc_S_uart_9000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_pl011(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_pl011(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_cfi_flash(fn) fn(DT_N_S_soc_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_cfi_flash(fn, ...) fn(DT_N_S_soc_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_cfi_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_cfi_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_memory_40000000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_memory_40000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_a53(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_a53(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_a53(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_a53(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv8_timer(fn) fn(DT_N_S_timer)
#define DT_FOREACH_OKAY_VARGS_arm_armv8_timer(fn, ...) fn(DT_N_S_timer, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv8_timer(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv8_timer(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_clock(fn) fn(DT_N_S_apb_pclk)
#define DT_FOREACH_OKAY_VARGS_fixed_clock(fn, ...) fn(DT_N_S_apb_pclk, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_clock(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_clock(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_psci_0_2(fn) fn(DT_N_S_psci)
#define DT_FOREACH_OKAY_VARGS_arm_psci_0_2(fn, ...) fn(DT_N_S_psci, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_psci_0_2(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_psci_0_2(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
