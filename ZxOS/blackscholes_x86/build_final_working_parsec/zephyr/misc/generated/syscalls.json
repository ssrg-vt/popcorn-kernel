[
    [
        [
            "int sys_cache_data_all",
            "int op"
        ],
        "cache.h"
    ],
    [
        [
            "int sys_cache_data_range",
            "void *addr, size_t size, int op"
        ],
        "cache.h"
    ],
    [
        [
            "int sys_cache_instr_all",
            "int op"
        ],
        "cache.h"
    ],
    [
        [
            "int sys_cache_instr_range",
            "void *addr, size_t size, int op"
        ],
        "cache.h"
    ],
    [
        [
            "const struct device *device_get_binding",
            "const char *name"
        ],
        "device.h"
    ],
    [
        [
            "int device_usable_check",
            "const struct device *dev"
        ],
        "device.h"
    ],
    [
        [
            "k_tid_t k_thread_create",
            "struct k_thread *new_thread,\n\t\t\t\t  k_thread_stack_t *stack,\n\t\t\t\t  size_t stack_size,\n\t\t\t\t  k_thread_entry_t entry,\n\t\t\t\t  void *p1, void *p2, void *p3,\n\t\t\t\t  int prio, uint32_t options, k_timeout_t delay"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_thread_stack_space_get",
            "const struct k_thread *thread,\n\t\t\t\t       size_t *unused_ptr"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_thread_join",
            "struct k_thread *thread, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int32_t k_sleep",
            "k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int32_t k_usleep",
            "int32_t us"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_busy_wait",
            "uint32_t usec_to_wait"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_yield",
            "void"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_wakeup",
            "k_tid_t thread"
        ],
        "kernel.h"
    ],
    [
        [
            "k_tid_t z_current_get",
            "void"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_thread_abort",
            "k_tid_t thread"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_thread_start",
            "k_tid_t thread"
        ],
        "kernel.h"
    ],
    [
        [
            "k_ticks_t k_thread_timeout_expires_ticks",
            "const struct k_thread *t"
        ],
        "kernel.h"
    ],
    [
        [
            "k_ticks_t k_thread_timeout_remaining_ticks",
            "const struct k_thread *t"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_thread_priority_get",
            "k_tid_t thread"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_thread_priority_set",
            "k_tid_t thread, int prio"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_thread_deadline_set",
            "k_tid_t thread, int deadline"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_thread_suspend",
            "k_tid_t thread"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_thread_resume",
            "k_tid_t thread"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_is_preempt_thread",
            "void"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_thread_custom_data_set",
            "void *value"
        ],
        "kernel.h"
    ],
    [
        [
            "void *k_thread_custom_data_get",
            "void"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_thread_name_set",
            "k_tid_t thread, const char *str"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_thread_name_copy",
            "k_tid_t thread, char *buf,\n\t\t\t\t size_t size"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_timer_start",
            "struct k_timer *timer,\n\t\t\t     k_timeout_t duration, k_timeout_t period"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_timer_stop",
            "struct k_timer *timer"
        ],
        "kernel.h"
    ],
    [
        [
            "uint32_t k_timer_status_get",
            "struct k_timer *timer"
        ],
        "kernel.h"
    ],
    [
        [
            "uint32_t k_timer_status_sync",
            "struct k_timer *timer"
        ],
        "kernel.h"
    ],
    [
        [
            "k_ticks_t k_timer_expires_ticks",
            "const struct k_timer *timer"
        ],
        "kernel.h"
    ],
    [
        [
            "k_ticks_t k_timer_remaining_ticks",
            "const struct k_timer *timer"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_timer_user_data_set",
            "struct k_timer *timer, void *user_data"
        ],
        "kernel.h"
    ],
    [
        [
            "void *k_timer_user_data_get",
            "const struct k_timer *timer"
        ],
        "kernel.h"
    ],
    [
        [
            "int64_t k_uptime_ticks",
            "void"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_queue_init",
            "struct k_queue *queue"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_queue_cancel_wait",
            "struct k_queue *queue"
        ],
        "kernel.h"
    ],
    [
        [
            "int32_t k_queue_alloc_append",
            "struct k_queue *queue, void *data"
        ],
        "kernel.h"
    ],
    [
        [
            "int32_t k_queue_alloc_prepend",
            "struct k_queue *queue, void *data"
        ],
        "kernel.h"
    ],
    [
        [
            "void *k_queue_get",
            "struct k_queue *queue, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_queue_is_empty",
            "struct k_queue *queue"
        ],
        "kernel.h"
    ],
    [
        [
            "void *k_queue_peek_head",
            "struct k_queue *queue"
        ],
        "kernel.h"
    ],
    [
        [
            "void *k_queue_peek_tail",
            "struct k_queue *queue"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_futex_wait",
            "struct k_futex *futex, int expected,\n\t\t\t   k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_futex_wake",
            "struct k_futex *futex, bool wake_all"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_event_init",
            "struct k_event *event"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_event_post",
            "struct k_event *event, uint32_t events"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_event_set",
            "struct k_event *event, uint32_t events"
        ],
        "kernel.h"
    ],
    [
        [
            "uint32_t k_event_wait",
            "struct k_event *event, uint32_t events,\n\t\t\t\tbool reset, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "uint32_t k_event_wait_all",
            "struct k_event *event, uint32_t events,\n\t\t\t\t    bool reset, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int32_t k_stack_alloc_init",
            "struct k_stack *stack,\n\t\t\t\t   uint32_t num_entries"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_stack_push",
            "struct k_stack *stack, stack_data_t data"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_stack_pop",
            "struct k_stack *stack, stack_data_t *data,\n\t\t\t  k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_mutex_init",
            "struct k_mutex *mutex"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_mutex_lock",
            "struct k_mutex *mutex, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_mutex_unlock",
            "struct k_mutex *mutex"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_condvar_init",
            "struct k_condvar *condvar"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_condvar_signal",
            "struct k_condvar *condvar"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_condvar_broadcast",
            "struct k_condvar *condvar"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_condvar_wait",
            "struct k_condvar *condvar, struct k_mutex *mutex,\n\t\t\t     k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_sem_init",
            "struct k_sem *sem, unsigned int initial_count,\n\t\t\t  unsigned int limit"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_sem_take",
            "struct k_sem *sem, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_sem_give",
            "struct k_sem *sem"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_sem_reset",
            "struct k_sem *sem"
        ],
        "kernel.h"
    ],
    [
        [
            "unsigned int k_sem_count_get",
            "struct k_sem *sem"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_msgq_alloc_init",
            "struct k_msgq *msgq, size_t msg_size,\n\t\t\t\tuint32_t max_msgs"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_msgq_put",
            "struct k_msgq *msgq, const void *data, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_msgq_get",
            "struct k_msgq *msgq, void *data, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_msgq_peek",
            "struct k_msgq *msgq, void *data"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_msgq_purge",
            "struct k_msgq *msgq"
        ],
        "kernel.h"
    ],
    [
        [
            "uint32_t k_msgq_num_free_get",
            "struct k_msgq *msgq"
        ],
        "kernel.h"
    ],
    [
        [
            "void  k_msgq_get_attrs",
            "struct k_msgq *msgq,\n\t\t\t\t struct k_msgq_attrs *attrs"
        ],
        "kernel.h"
    ],
    [
        [
            "uint32_t k_msgq_num_used_get",
            "struct k_msgq *msgq"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_pipe_alloc_init",
            "struct k_pipe *pipe, size_t size"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_pipe_put",
            "struct k_pipe *pipe, void *data,\n\t\t\t size_t bytes_to_write, size_t *bytes_written,\n\t\t\t size_t min_xfer, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_pipe_get",
            "struct k_pipe *pipe, void *data,\n\t\t\t size_t bytes_to_read, size_t *bytes_read,\n\t\t\t size_t min_xfer, k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "size_t k_pipe_read_avail",
            "struct k_pipe *pipe"
        ],
        "kernel.h"
    ],
    [
        [
            "size_t k_pipe_write_avail",
            "struct k_pipe *pipe"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_poll",
            "struct k_poll_event *events, int num_events,\n\t\t     k_timeout_t timeout"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_poll_signal_init",
            "struct k_poll_signal *sig"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_poll_signal_reset",
            "struct k_poll_signal *sig"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_poll_signal_check",
            "struct k_poll_signal *sig,\n\t\t\t\t   unsigned int *signaled, int *result"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_poll_signal_raise",
            "struct k_poll_signal *sig, int result"
        ],
        "kernel.h"
    ],
    [
        [
            "void k_str_out",
            "char *c, size_t n"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_float_disable",
            "struct k_thread *thread"
        ],
        "kernel.h"
    ],
    [
        [
            "int k_float_enable",
            "struct k_thread *thread, unsigned int options"
        ],
        "kernel.h"
    ],
    [
        [
            "void user_fault",
            "unsigned int reason"
        ],
        "error.h"
    ],
    [
        [
            "int adc_channel_setup",
            "const struct device *dev,\n\t\t\t\tconst struct adc_channel_cfg *channel_cfg"
        ],
        "adc.h"
    ],
    [
        [
            "int adc_read",
            "const struct device *dev,\n\t\t       const struct adc_sequence *sequence"
        ],
        "adc.h"
    ],
    [
        [
            "int adc_read_async",
            "const struct device *dev,\n\t\t\t     const struct adc_sequence *sequence,\n\t\t\t     struct k_poll_signal *async"
        ],
        "adc.h"
    ],
    [
        [
            "int bbram_check_invalid",
            "const struct device *dev"
        ],
        "bbram.h"
    ],
    [
        [
            "int bbram_check_standby_power",
            "const struct device *dev"
        ],
        "bbram.h"
    ],
    [
        [
            "int bbram_check_power",
            "const struct device *dev"
        ],
        "bbram.h"
    ],
    [
        [
            "int bbram_get_size",
            "const struct device *dev, size_t *size"
        ],
        "bbram.h"
    ],
    [
        [
            "int bbram_read",
            "const struct device *dev, size_t offset, size_t size,\n\t\t\t uint8_t *data"
        ],
        "bbram.h"
    ],
    [
        [
            "int bbram_write",
            "const struct device *dev, size_t offset, size_t size,\n\t\t\t  const uint8_t *data"
        ],
        "bbram.h"
    ],
    [
        [
            "int can_get_core_clock",
            "const struct device *dev, uint32_t *rate"
        ],
        "can.h"
    ],
    [
        [
            "int can_set_timing",
            "const struct device *dev,\n\t\t\t     const struct can_timing *timing,\n\t\t\t     const struct can_timing *timing_data"
        ],
        "can.h"
    ],
    [
        [
            "int can_set_mode",
            "const struct device *dev, enum can_mode mode"
        ],
        "can.h"
    ],
    [
        [
            "int can_send",
            "const struct device *dev, const struct zcan_frame *frame,\n\t\t       k_timeout_t timeout, can_tx_callback_t callback,\n\t\t       void *user_data"
        ],
        "can.h"
    ],
    [
        [
            "int can_attach_msgq",
            "const struct device *dev, struct k_msgq *msg_q,\n\t\t\t      const struct zcan_filter *filter"
        ],
        "can.h"
    ],
    [
        [
            "void can_detach",
            "const struct device *dev, int filter_id"
        ],
        "can.h"
    ],
    [
        [
            "int can_get_max_filters",
            "const struct device *dev, enum can_ide id_type"
        ],
        "can.h"
    ],
    [
        [
            "enum can_state can_get_state",
            "const struct device *dev,\n\t\t\t\t       struct can_bus_err_cnt *err_cnt"
        ],
        "can.h"
    ],
    [
        [
            "int can_recover",
            "const struct device *dev, k_timeout_t timeout"
        ],
        "can.h"
    ],
    [
        [
            "bool counter_is_counting_up",
            "const struct device *dev"
        ],
        "counter.h"
    ],
    [
        [
            "uint8_t counter_get_num_of_channels",
            "const struct device *dev"
        ],
        "counter.h"
    ],
    [
        [
            "uint32_t counter_get_frequency",
            "const struct device *dev"
        ],
        "counter.h"
    ],
    [
        [
            "uint32_t counter_us_to_ticks",
            "const struct device *dev, uint64_t us"
        ],
        "counter.h"
    ],
    [
        [
            "uint64_t counter_ticks_to_us",
            "const struct device *dev, uint32_t ticks"
        ],
        "counter.h"
    ],
    [
        [
            "uint32_t counter_get_max_top_value",
            "const struct device *dev"
        ],
        "counter.h"
    ],
    [
        [
            "int counter_start",
            "const struct device *dev"
        ],
        "counter.h"
    ],
    [
        [
            "int counter_stop",
            "const struct device *dev"
        ],
        "counter.h"
    ],
    [
        [
            "int counter_get_value",
            "const struct device *dev, uint32_t *ticks"
        ],
        "counter.h"
    ],
    [
        [
            "int counter_set_channel_alarm",
            "const struct device *dev,\n\t\t\t\t\tuint8_t chan_id,\n\t\t\t\t\tconst struct counter_alarm_cfg *alarm_cfg"
        ],
        "counter.h"
    ],
    [
        [
            "int counter_cancel_channel_alarm",
            "const struct device *dev,\n\t\t\t\t\t   uint8_t chan_id"
        ],
        "counter.h"
    ],
    [
        [
            "int counter_set_top_value",
            "const struct device *dev,\n\t\t\t\t    const struct counter_top_cfg *cfg"
        ],
        "counter.h"
    ],
    [
        [
            "int counter_get_pending_int",
            "const struct device *dev"
        ],
        "counter.h"
    ],
    [
        [
            "uint32_t counter_get_top_value",
            "const struct device *dev"
        ],
        "counter.h"
    ],
    [
        [
            "int counter_set_guard_period",
            "const struct device *dev,\n\t\t\t\t\tuint32_t ticks,\n\t\t\t\t\tuint32_t flags"
        ],
        "counter.h"
    ],
    [
        [
            "uint32_t counter_get_guard_period",
            "const struct device *dev,\n\t\t\t\t\t    uint32_t flags"
        ],
        "counter.h"
    ],
    [
        [
            "int dac_channel_setup",
            "const struct device *dev,\n\t\t\t\tconst struct dac_channel_cfg *channel_cfg"
        ],
        "dac.h"
    ],
    [
        [
            "int dac_write_value",
            "const struct device *dev, uint8_t channel,\n\t\t\t      uint32_t value"
        ],
        "dac.h"
    ],
    [
        [
            "int dma_start",
            "const struct device *dev, uint32_t channel"
        ],
        "dma.h"
    ],
    [
        [
            "int dma_stop",
            "const struct device *dev, uint32_t channel"
        ],
        "dma.h"
    ],
    [
        [
            "int dma_request_channel",
            "const struct device *dev,\n\t\t\t\t  void *filter_param"
        ],
        "dma.h"
    ],
    [
        [
            "void dma_release_channel",
            "const struct device *dev,\n\t\t\t\t   uint32_t channel"
        ],
        "dma.h"
    ],
    [
        [
            "int dma_chan_filter",
            "const struct device *dev,\n\t\t\t\t   int channel, void *filter_param"
        ],
        "dma.h"
    ],
    [
        [
            "int ec_host_cmd_periph_init",
            "const struct device *dev,\n\t\t\t\t      struct ec_host_cmd_periph_rx_ctx *rx_ctx"
        ],
        "ec_host_cmd_periph.h"
    ],
    [
        [
            "int ec_host_cmd_periph_send",
            "\n\tconst struct device *dev,\n\tconst struct ec_host_cmd_periph_tx_buf *tx_buf"
        ],
        "ec_host_cmd_periph.h"
    ],
    [
        [
            "int eeprom_read",
            "const struct device *dev, off_t offset, void *data,\n\t\t\t  size_t len"
        ],
        "eeprom.h"
    ],
    [
        [
            "int eeprom_write",
            "const struct device *dev, off_t offset,\n\t\t\t   const void *data,\n\t\t\t   size_t len"
        ],
        "eeprom.h"
    ],
    [
        [
            "size_t eeprom_get_size",
            "const struct device *dev"
        ],
        "eeprom.h"
    ],
    [
        [
            "int entropy_get_entropy",
            "const struct device *dev,\n\t\t\t\t  uint8_t *buffer,\n\t\t\t\t  uint16_t length"
        ],
        "entropy.h"
    ],
    [
        [
            "int espi_config",
            "const struct device *dev, struct espi_cfg *cfg"
        ],
        "espi.h"
    ],
    [
        [
            "bool espi_get_channel_status",
            "const struct device *dev,\n\t\t\t\t       enum espi_channel ch"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_read_request",
            "const struct device *dev,\n\t\t\t\tstruct espi_request_packet *req"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_write_request",
            "const struct device *dev,\n\t\t\t\t struct espi_request_packet *req"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_read_lpc_request",
            "const struct device *dev,\n\t\t\t\t    enum lpc_peripheral_opcode op,\n\t\t\t\t    uint32_t *data"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_write_lpc_request",
            "const struct device *dev,\n\t\t\t\t     enum lpc_peripheral_opcode op,\n\t\t\t\t     uint32_t *data"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_send_vwire",
            "const struct device *dev,\n\t\t\t      enum espi_vwire_signal signal,\n\t\t\t      uint8_t level"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_receive_vwire",
            "const struct device *dev,\n\t\t\t\t enum espi_vwire_signal signal,\n\t\t\t\t uint8_t *level"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_send_oob",
            "const struct device *dev,\n\t\t\t    struct espi_oob_packet *pckt"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_receive_oob",
            "const struct device *dev,\n\t\t\t       struct espi_oob_packet *pckt"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_read_flash",
            "const struct device *dev,\n\t\t\t      struct espi_flash_packet *pckt"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_write_flash",
            "const struct device *dev,\n\t\t\t       struct espi_flash_packet *pckt"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_flash_erase",
            "const struct device *dev,\n\t\t\t       struct espi_flash_packet *pckt"
        ],
        "espi.h"
    ],
    [
        [
            "int espi_saf_config",
            "const struct device *dev,\n\t\t\t      const struct espi_saf_cfg *cfg"
        ],
        "espi_saf.h"
    ],
    [
        [
            "int espi_saf_set_protection_regions",
            "\n\t\t\t\tconst struct device *dev,\n\t\t\t\tconst struct espi_saf_protection *pr"
        ],
        "espi_saf.h"
    ],
    [
        [
            "int espi_saf_activate",
            "const struct device *dev"
        ],
        "espi_saf.h"
    ],
    [
        [
            "bool espi_saf_get_channel_status",
            "const struct device *dev"
        ],
        "espi_saf.h"
    ],
    [
        [
            "int espi_saf_flash_read",
            "const struct device *dev,\n\t\t\t\t  struct espi_saf_packet *pckt"
        ],
        "espi_saf.h"
    ],
    [
        [
            "int espi_saf_flash_write",
            "const struct device *dev,\n\t\t\t\t   struct espi_saf_packet *pckt"
        ],
        "espi_saf.h"
    ],
    [
        [
            "int espi_saf_flash_erase",
            "const struct device *dev,\n\t\t\t\t   struct espi_saf_packet *pckt"
        ],
        "espi_saf.h"
    ],
    [
        [
            "int flash_read",
            "const struct device *dev, off_t offset, void *data,\n\t\t\t size_t len"
        ],
        "flash.h"
    ],
    [
        [
            "int flash_write",
            "const struct device *dev, off_t offset,\n\t\t\t  const void *data,\n\t\t\t  size_t len"
        ],
        "flash.h"
    ],
    [
        [
            "int flash_erase",
            "const struct device *dev, off_t offset, size_t size"
        ],
        "flash.h"
    ],
    [
        [
            "int flash_write_protection_set",
            "const struct device *dev,\n\t\t\t\t\t bool enable"
        ],
        "flash.h"
    ],
    [
        [
            "int flash_get_page_info_by_offs",
            "const struct device *dev,\n\t\t\t\t\t  off_t offset,\n\t\t\t\t\t  struct flash_pages_info *info"
        ],
        "flash.h"
    ],
    [
        [
            "int flash_get_page_info_by_idx",
            "const struct device *dev,\n\t\t\t\t\t uint32_t page_index,\n\t\t\t\t\t struct flash_pages_info *info"
        ],
        "flash.h"
    ],
    [
        [
            "size_t flash_get_page_count",
            "const struct device *dev"
        ],
        "flash.h"
    ],
    [
        [
            "int flash_sfdp_read",
            "const struct device *dev, off_t offset,\n\t\t\t      void *data, size_t len"
        ],
        "flash.h"
    ],
    [
        [
            "int flash_read_jedec_id",
            "const struct device *dev, uint8_t *id"
        ],
        "flash.h"
    ],
    [
        [
            "size_t flash_get_write_block_size",
            "const struct device *dev"
        ],
        "flash.h"
    ],
    [
        [
            "const struct flash_parameters *flash_get_parameters",
            "const struct device *dev"
        ],
        "flash.h"
    ],
    [
        [
            "int gpio_pin_interrupt_configure",
            "const struct device *port,\n\t\t\t\t\t   gpio_pin_t pin,\n\t\t\t\t\t   gpio_flags_t flags"
        ],
        "gpio.h"
    ],
    [
        [
            "int gpio_pin_configure",
            "const struct device *port,\n\t\t\t\t gpio_pin_t pin,\n\t\t\t\t gpio_flags_t flags"
        ],
        "gpio.h"
    ],
    [
        [
            "int gpio_port_get_raw",
            "const struct device *port,\n\t\t\t\tgpio_port_value_t *value"
        ],
        "gpio.h"
    ],
    [
        [
            "int gpio_port_set_masked_raw",
            "const struct device *port,\n\t\t\t\t       gpio_port_pins_t mask,\n\t\t\t\t       gpio_port_value_t value"
        ],
        "gpio.h"
    ],
    [
        [
            "int gpio_port_set_bits_raw",
            "const struct device *port,\n\t\t\t\t     gpio_port_pins_t pins"
        ],
        "gpio.h"
    ],
    [
        [
            "int gpio_port_clear_bits_raw",
            "const struct device *port,\n\t\t\t\t       gpio_port_pins_t pins"
        ],
        "gpio.h"
    ],
    [
        [
            "int gpio_port_toggle_bits",
            "const struct device *port,\n\t\t\t\t    gpio_port_pins_t pins"
        ],
        "gpio.h"
    ],
    [
        [
            "int gpio_get_pending_int",
            "const struct device *dev"
        ],
        "gpio.h"
    ],
    [
        [
            "ssize_t hwinfo_get_device_id",
            "uint8_t *buffer, size_t length"
        ],
        "hwinfo.h"
    ],
    [
        [
            "int hwinfo_get_reset_cause",
            "uint32_t *cause"
        ],
        "hwinfo.h"
    ],
    [
        [
            "int hwinfo_clear_reset_cause",
            "void"
        ],
        "hwinfo.h"
    ],
    [
        [
            "int hwinfo_get_supported_reset_cause",
            "uint32_t *supported"
        ],
        "hwinfo.h"
    ],
    [
        [
            "int i2c_configure",
            "const struct device *dev, uint32_t dev_config"
        ],
        "i2c.h"
    ],
    [
        [
            "int i2c_get_config",
            "const struct device *dev, uint32_t *dev_config"
        ],
        "i2c.h"
    ],
    [
        [
            "int i2c_transfer",
            "const struct device *dev,\n\t\t\t   struct i2c_msg *msgs, uint8_t num_msgs,\n\t\t\t   uint16_t addr"
        ],
        "i2c.h"
    ],
    [
        [
            "int i2c_recover_bus",
            "const struct device *dev"
        ],
        "i2c.h"
    ],
    [
        [
            "int i2c_slave_driver_register",
            "const struct device *dev"
        ],
        "i2c.h"
    ],
    [
        [
            "int i2c_slave_driver_unregister",
            "const struct device *dev"
        ],
        "i2c.h"
    ],
    [
        [
            "int i2s_configure",
            "const struct device *dev, enum i2s_dir dir,\n\t\t\t    const struct i2s_config *cfg"
        ],
        "i2s.h"
    ],
    [
        [
            "int i2s_buf_read",
            "const struct device *dev, void *buf, size_t *size"
        ],
        "i2s.h"
    ],
    [
        [
            "int i2s_buf_write",
            "const struct device *dev, void *buf, size_t size"
        ],
        "i2s.h"
    ],
    [
        [
            "int i2s_trigger",
            "const struct device *dev, enum i2s_dir dir,\n\t\t\t  enum i2s_trigger_cmd cmd"
        ],
        "i2s.h"
    ],
    [
        [
            "int ipm_send",
            "const struct device *ipmdev, int wait, uint32_t id,\n\t\t       const void *data, int size"
        ],
        "ipm.h"
    ],
    [
        [
            "int ipm_max_data_size_get",
            "const struct device *ipmdev"
        ],
        "ipm.h"
    ],
    [
        [
            "uint32_t ipm_max_id_val_get",
            "const struct device *ipmdev"
        ],
        "ipm.h"
    ],
    [
        [
            "int ipm_set_enabled",
            "const struct device *ipmdev, int enable"
        ],
        "ipm.h"
    ],
    [
        [
            "int kscan_config",
            "const struct device *dev,\n\t\t\t     kscan_callback_t callback"
        ],
        "kscan.h"
    ],
    [
        [
            "int kscan_enable_callback",
            "const struct device *dev"
        ],
        "kscan.h"
    ],
    [
        [
            "int kscan_disable_callback",
            "const struct device *dev"
        ],
        "kscan.h"
    ],
    [
        [
            "int led_blink",
            "const struct device *dev, uint32_t led,\n\t\t\t    uint32_t delay_on, uint32_t delay_off"
        ],
        "led.h"
    ],
    [
        [
            "int led_get_info",
            "const struct device *dev, uint32_t led,\n\t\t\t   const struct led_info **info"
        ],
        "led.h"
    ],
    [
        [
            "int led_set_brightness",
            "const struct device *dev, uint32_t led,\n\t\t\t\t     uint8_t value"
        ],
        "led.h"
    ],
    [
        [
            "int led_write_channels",
            "const struct device *dev,\n\t\t\t\t uint32_t start_channel,\n\t\t\t\t uint32_t num_channels, const uint8_t *buf"
        ],
        "led.h"
    ],
    [
        [
            "int led_set_channel",
            "const struct device *dev,\n\t\t\t      uint32_t channel, uint8_t value"
        ],
        "led.h"
    ],
    [
        [
            "int led_set_color",
            "const struct device *dev, uint32_t led,\n\t\t\t    uint8_t num_colors, const uint8_t *color"
        ],
        "led.h"
    ],
    [
        [
            "int led_on",
            "const struct device *dev, uint32_t led"
        ],
        "led.h"
    ],
    [
        [
            "int led_off",
            "const struct device *dev, uint32_t led"
        ],
        "led.h"
    ],
    [
        [
            "int mbox_send",
            "const struct mbox_channel *channel, const struct mbox_msg *msg"
        ],
        "mbox.h"
    ],
    [
        [
            "int mbox_mtu_get",
            "const struct device *dev"
        ],
        "mbox.h"
    ],
    [
        [
            "int mbox_set_enabled",
            "const struct mbox_channel *channel, bool enable"
        ],
        "mbox.h"
    ],
    [
        [
            "uint32_t mbox_max_channels_get",
            "const struct device *dev"
        ],
        "mbox.h"
    ],
    [
        [
            "void mdio_bus_enable",
            "const struct device *dev"
        ],
        "mdio.h"
    ],
    [
        [
            "void mdio_bus_disable",
            "const struct device *dev"
        ],
        "mdio.h"
    ],
    [
        [
            "int mdio_read",
            "const struct device *dev, uint8_t prtad, uint8_t devad,\n\t\t\tuint16_t *data"
        ],
        "mdio.h"
    ],
    [
        [
            "int mdio_write",
            "const struct device *dev, uint8_t prtad, uint8_t devad,\n\t\t\t uint16_t data"
        ],
        "mdio.h"
    ],
    [
        [
            "int peci_config",
            "const struct device *dev, uint32_t bitrate"
        ],
        "peci.h"
    ],
    [
        [
            "int peci_enable",
            "const struct device *dev"
        ],
        "peci.h"
    ],
    [
        [
            "int peci_disable",
            "const struct device *dev"
        ],
        "peci.h"
    ],
    [
        [
            "int peci_transfer",
            "const struct device *dev, struct peci_msg *msg"
        ],
        "peci.h"
    ],
    [
        [
            "int ps2_config",
            "const struct device *dev,\n\t\t\t ps2_callback_t callback_isr"
        ],
        "ps2.h"
    ],
    [
        [
            "int ps2_write",
            "const struct device *dev, uint8_t value"
        ],
        "ps2.h"
    ],
    [
        [
            "int ps2_read",
            "const struct device *dev,  uint8_t *value"
        ],
        "ps2.h"
    ],
    [
        [
            "int ps2_enable_callback",
            "const struct device *dev"
        ],
        "ps2.h"
    ],
    [
        [
            "int ps2_disable_callback",
            "const struct device *dev"
        ],
        "ps2.h"
    ],
    [
        [
            "int ptp_clock_get",
            "const struct device *dev, struct net_ptp_time *tm"
        ],
        "ptp_clock.h"
    ],
    [
        [
            "int pwm_pin_set_cycles",
            "const struct device *dev, uint32_t pwm,\n\t\t\t\t uint32_t period, uint32_t pulse, pwm_flags_t flags"
        ],
        "pwm.h"
    ],
    [
        [
            "int pwm_pin_enable_capture",
            "const struct device *dev, uint32_t pwm"
        ],
        "pwm.h"
    ],
    [
        [
            "int pwm_pin_disable_capture",
            "const struct device *dev, uint32_t pwm"
        ],
        "pwm.h"
    ],
    [
        [
            "int pwm_pin_capture_cycles",
            "const struct device *dev, uint32_t pwm,\n\t\t\t\t     pwm_flags_t flags,\n\t\t\t\t     uint32_t *period,\n\t\t\t\t     uint32_t *pulse,\n\t\t\t\t     k_timeout_t timeout"
        ],
        "pwm.h"
    ],
    [
        [
            "int pwm_get_cycles_per_sec",
            "const struct device *dev, uint32_t pwm,\n\t\t\t\t     uint64_t *cycles"
        ],
        "pwm.h"
    ],
    [
        [
            "int sensor_attr_set",
            "const struct device *dev,\n\t\t\t      enum sensor_channel chan,\n\t\t\t      enum sensor_attribute attr,\n\t\t\t      const struct sensor_value *val"
        ],
        "sensor.h"
    ],
    [
        [
            "int sensor_attr_get",
            "const struct device *dev,\n\t\t\t      enum sensor_channel chan,\n\t\t\t      enum sensor_attribute attr,\n\t\t\t      struct sensor_value *val"
        ],
        "sensor.h"
    ],
    [
        [
            "int sensor_sample_fetch",
            "const struct device *dev"
        ],
        "sensor.h"
    ],
    [
        [
            "int sensor_sample_fetch_chan",
            "const struct device *dev,\n\t\t\t\t       enum sensor_channel type"
        ],
        "sensor.h"
    ],
    [
        [
            "int sensor_channel_get",
            "const struct device *dev,\n\t\t\t\t enum sensor_channel chan,\n\t\t\t\t struct sensor_value *val"
        ],
        "sensor.h"
    ],
    [
        [
            "int spi_transceive",
            "const struct device *dev,\n\t\t\t     const struct spi_config *config,\n\t\t\t     const struct spi_buf_set *tx_bufs,\n\t\t\t     const struct spi_buf_set *rx_bufs"
        ],
        "spi.h"
    ],
    [
        [
            "int spi_release",
            "const struct device *dev,\n\t\t\t  const struct spi_config *config"
        ],
        "spi.h"
    ],
    [
        [
            "int syscon_get_base",
            "const struct device *dev, uintptr_t *addr"
        ],
        "syscon.h"
    ],
    [
        [
            "int syscon_read_reg",
            "const struct device *dev, uint16_t reg, uint32_t *val"
        ],
        "syscon.h"
    ],
    [
        [
            "int syscon_write_reg",
            "const struct device *dev, uint16_t reg, uint32_t val"
        ],
        "syscon.h"
    ],
    [
        [
            "int syscon_get_size",
            "const struct device *dev, size_t *size"
        ],
        "syscon.h"
    ],
    [
        [
            "int uart_tx",
            "const struct device *dev, const uint8_t *buf,\n\t\t      size_t len,\n\t\t      int32_t timeout"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_tx_u16",
            "const struct device *dev, const uint16_t *buf,\n\t\t\t  size_t len, int32_t timeout"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_tx_abort",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_rx_enable",
            "const struct device *dev, uint8_t *buf,\n\t\t\t     size_t len,\n\t\t\t     int32_t timeout"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_rx_enable_u16",
            "const struct device *dev, uint16_t *buf,\n\t\t\t\t size_t len, int32_t timeout"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_rx_disable",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_err_check",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_poll_in",
            "const struct device *dev, unsigned char *p_char"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_poll_in_u16",
            "const struct device *dev, uint16_t *p_u16"
        ],
        "uart.h"
    ],
    [
        [
            "void uart_poll_out",
            "const struct device *dev,\n\t\t\t\t      unsigned char out_char"
        ],
        "uart.h"
    ],
    [
        [
            "void uart_poll_out_u16",
            "const struct device *dev, uint16_t out_u16"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_configure",
            "const struct device *dev,\n\t\t\t     const struct uart_config *cfg"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_config_get",
            "const struct device *dev,\n\t\t\t      struct uart_config *cfg"
        ],
        "uart.h"
    ],
    [
        [
            "void uart_irq_tx_enable",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "void uart_irq_tx_disable",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "void uart_irq_rx_enable",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "void uart_irq_rx_disable",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "void uart_irq_err_enable",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "void uart_irq_err_disable",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_irq_is_pending",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_irq_update",
            "const struct device *dev"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_line_ctrl_set",
            "const struct device *dev,\n\t\t\t\t uint32_t ctrl, uint32_t val"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_line_ctrl_get",
            "const struct device *dev, uint32_t ctrl,\n\t\t\t\t uint32_t *val"
        ],
        "uart.h"
    ],
    [
        [
            "int uart_drv_cmd",
            "const struct device *dev, uint32_t cmd, uint32_t p"
        ],
        "uart.h"
    ],
    [
        [
            "int wdt_setup",
            "const struct device *dev, uint8_t options"
        ],
        "watchdog.h"
    ],
    [
        [
            "int wdt_disable",
            "const struct device *dev"
        ],
        "watchdog.h"
    ],
    [
        [
            "int wdt_feed",
            "const struct device *dev, int channel_id"
        ],
        "watchdog.h"
    ],
    [
        [
            "const struct device *uart_mux_find",
            "int dlci_address"
        ],
        "uart_mux.h"
    ],
    [
        [
            "void *flash_simulator_get_memory",
            "const struct device *dev,\n\t\t\t\t\t   size_t *mock_size"
        ],
        "flash_simulator.h"
    ],
    [
        [
            "int maxim_ds3231_req_syncpoint",
            "const struct device *dev,\n\t\t\t\t\t struct k_poll_signal *signal"
        ],
        "maxim_ds3231.h"
    ],
    [
        [
            "int maxim_ds3231_get_syncpoint",
            "const struct device *dev,\n\t\t\t\t\t struct maxim_ds3231_syncpoint *syncpoint"
        ],
        "maxim_ds3231.h"
    ],
    [
        [
            "size_t ivshmem_get_mem",
            "const struct device *dev,\n\t\t\t\t uintptr_t *memmap"
        ],
        "ivshmem.h"
    ],
    [
        [
            "uint32_t ivshmem_get_id",
            "const struct device *dev"
        ],
        "ivshmem.h"
    ],
    [
        [
            "uint16_t ivshmem_get_vectors",
            "const struct device *dev"
        ],
        "ivshmem.h"
    ],
    [
        [
            "int ivshmem_int_peer",
            "const struct device *dev,\n\t\t\t       uint32_t peer_id, uint16_t vector"
        ],
        "ivshmem.h"
    ],
    [
        [
            "int ivshmem_register_handler",
            "const struct device *dev,\n\t\t\t\t       struct k_poll_signal *signal,\n\t\t\t\t       uint16_t vector"
        ],
        "ivshmem.h"
    ],
    [
        [
            "void z_log_string_from_user",
            "uint32_t src_level_val, const char *str"
        ],
        "log_core.h"
    ],
    [
        [
            "void z_log_hexdump_from_user",
            "uint32_t src_level_val,\n\t\t\t\t       const char *metadata,\n\t\t\t\t       const uint8_t *data, uint32_t len"
        ],
        "log_core.h"
    ],
    [
        [
            "void log_panic",
            "void"
        ],
        "log_ctrl.h"
    ],
    [
        [
            "bool log_process",
            "bool bypass"
        ],
        "log_ctrl.h"
    ],
    [
        [
            "uint32_t log_buffered_cnt",
            "void"
        ],
        "log_ctrl.h"
    ],
    [
        [
            "uint32_t log_filter_set",
            "struct log_backend const *const backend,\n\t\t\t\t  uint32_t domain_id, int16_t source_id,\n\t\t\t\t  uint32_t level"
        ],
        "log_ctrl.h"
    ],
    [
        [
            "void z_log_msg2_static_create",
            "const void *source,\n\t\t\t\t\tconst struct log_msg2_desc desc,\n\t\t\t\t\tuint8_t *package, const void *data"
        ],
        "log_msg2.h"
    ],
    [
        [
            "void z_log_msg2_runtime_vcreate",
            "uint8_t domain_id, const void *source,\n\t\t\t\t\t  uint8_t level, const void *data,\n\t\t\t\t\t  size_t dlen, const char *fmt,\n\t\t\t\t\t  va_list ap"
        ],
        "log_msg2.h"
    ],
    [
        [
            "const struct device *net_eth_get_ptp_clock_by_index",
            "int index"
        ],
        "ethernet.h"
    ],
    [
        [
            "int net_if_ipv6_addr_lookup_by_index",
            "const struct in6_addr *addr"
        ],
        "net_if.h"
    ],
    [
        [
            "bool net_if_ipv6_addr_add_by_index",
            "int index,\n\t\t\t\t\t     struct in6_addr *addr,\n\t\t\t\t\t     enum net_addr_type addr_type,\n\t\t\t\t\t     uint32_t vlifetime"
        ],
        "net_if.h"
    ],
    [
        [
            "bool net_if_ipv6_addr_rm_by_index",
            "int index,\n\t\t\t\t\t    const struct in6_addr *addr"
        ],
        "net_if.h"
    ],
    [
        [
            "int net_if_ipv4_addr_lookup_by_index",
            "const struct in_addr *addr"
        ],
        "net_if.h"
    ],
    [
        [
            "bool net_if_ipv4_addr_add_by_index",
            "int index,\n\t\t\t\t\t     struct in_addr *addr,\n\t\t\t\t\t     enum net_addr_type addr_type,\n\t\t\t\t\t     uint32_t vlifetime"
        ],
        "net_if.h"
    ],
    [
        [
            "bool net_if_ipv4_addr_rm_by_index",
            "int index,\n\t\t\t\t\t    const struct in_addr *addr"
        ],
        "net_if.h"
    ],
    [
        [
            "bool net_if_ipv4_set_netmask_by_index",
            "int index,\n\t\t\t\t\t\tconst struct in_addr *netmask"
        ],
        "net_if.h"
    ],
    [
        [
            "bool net_if_ipv4_set_gw_by_index",
            "int index, const struct in_addr *gw"
        ],
        "net_if.h"
    ],
    [
        [
            "struct net_if *net_if_get_by_index",
            "int index"
        ],
        "net_if.h"
    ],
    [
        [
            "int net_addr_pton",
            "sa_family_t family, const char *src, void *dst"
        ],
        "net_ip.h"
    ],
    [
        [
            "char *net_addr_ntop",
            "sa_family_t family, const void *src,\n\t\t\t      char *dst, size_t size"
        ],
        "net_ip.h"
    ],
    [
        [
            "int phy_configure_link",
            "const struct device *dev,\n\t\t\t\t enum phy_link_speed speeds"
        ],
        "phy.h"
    ],
    [
        [
            "int phy_get_link_state",
            "const struct device *dev,\n\t\t\t\t struct phy_link_state *state"
        ],
        "phy.h"
    ],
    [
        [
            "int phy_link_callback_set",
            "const struct device *dev,\n\t\t\t\t    phy_callback_t callback,\n\t\t\t\t    void *user_data"
        ],
        "phy.h"
    ],
    [
        [
            "int phy_read",
            "const struct device *dev, uint16_t reg_addr,\n\t\t       uint32_t *value"
        ],
        "phy.h"
    ],
    [
        [
            "int phy_write",
            "const struct device *dev, uint16_t reg_addr,\n\t\t\tuint32_t value"
        ],
        "phy.h"
    ],
    [
        [
            "void *zsock_get_context_object",
            "int sock"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_socket",
            "int family, int type, int proto"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_socketpair",
            "int family, int type, int proto, int *sv"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_close",
            "int sock"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_shutdown",
            "int sock, int how"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_bind",
            "int sock, const struct sockaddr *addr,\n\t\t\t socklen_t addrlen"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_connect",
            "int sock, const struct sockaddr *addr,\n\t\t\t    socklen_t addrlen"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_listen",
            "int sock, int backlog"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_accept",
            "int sock, struct sockaddr *addr, socklen_t *addrlen"
        ],
        "socket.h"
    ],
    [
        [
            "ssize_t zsock_sendto",
            "int sock, const void *buf, size_t len,\n\t\t\t       int flags, const struct sockaddr *dest_addr,\n\t\t\t       socklen_t addrlen"
        ],
        "socket.h"
    ],
    [
        [
            "ssize_t zsock_sendmsg",
            "int sock, const struct msghdr *msg,\n\t\t\t\tint flags"
        ],
        "socket.h"
    ],
    [
        [
            "ssize_t zsock_recvfrom",
            "int sock, void *buf, size_t max_len,\n\t\t\t\t int flags, struct sockaddr *src_addr,\n\t\t\t\t socklen_t *addrlen"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_fcntl",
            "int sock, int cmd, int flags"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_poll",
            "struct zsock_pollfd *fds, int nfds, int timeout"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_getsockopt",
            "int sock, int level, int optname,\n\t\t\t       void *optval, socklen_t *optlen"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_setsockopt",
            "int sock, int level, int optname,\n\t\t\t       const void *optval, socklen_t optlen"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_getsockname",
            "int sock, struct sockaddr *addr,\n\t\t\t\tsocklen_t *addrlen"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_gethostname",
            "char *buf, size_t len"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_inet_pton",
            "sa_family_t family, const char *src, void *dst"
        ],
        "socket.h"
    ],
    [
        [
            "int z_zsock_getaddrinfo_internal",
            "const char *host,\n\t\t\t\t\t   const char *service,\n\t\t\t\t\t   const struct zsock_addrinfo *hints,\n\t\t\t\t\t   struct zsock_addrinfo *res"
        ],
        "socket.h"
    ],
    [
        [
            "int zsock_select",
            "int nfds, zsock_fd_set *readfds,\n\t\t\t   zsock_fd_set *writefds,\n\t\t\t   zsock_fd_set *exceptfds,\n\t\t\t   struct zsock_timeval *timeout"
        ],
        "socket_select.h"
    ],
    [
        [
            "int clock_gettime",
            "clockid_t clock_id, struct timespec *ts"
        ],
        "time.h"
    ],
    [
        [
            "uint32_t sys_rand32_get",
            "void"
        ],
        "rand32.h"
    ],
    [
        [
            "void sys_rand_get",
            "void *dst, size_t len"
        ],
        "rand32.h"
    ],
    [
        [
            "int sys_csrand_get",
            "void *dst, size_t len"
        ],
        "rand32.h"
    ],
    [
        [
            "bool atomic_cas",
            "atomic_t *target, atomic_val_t old_value,\n\t\t\t atomic_val_t new_value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "bool atomic_ptr_cas",
            "atomic_ptr_t *target, atomic_ptr_val_t old_value,\n\t\t\t      atomic_ptr_val_t new_value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "atomic_val_t atomic_add",
            "atomic_t *target, atomic_val_t value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "atomic_val_t atomic_sub",
            "atomic_t *target, atomic_val_t value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "atomic_val_t atomic_set",
            "atomic_t *target, atomic_val_t value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "atomic_ptr_val_t atomic_ptr_set",
            "atomic_ptr_t *target, atomic_ptr_val_t value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "atomic_val_t atomic_or",
            "atomic_t *target, atomic_val_t value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "atomic_val_t atomic_xor",
            "atomic_t *target, atomic_val_t value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "atomic_val_t atomic_and",
            "atomic_t *target, atomic_val_t value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "atomic_val_t atomic_nand",
            "atomic_t *target, atomic_val_t value"
        ],
        "atomic_c.h"
    ],
    [
        [
            "int *z_errno",
            "void"
        ],
        "errno_private.h"
    ],
    [
        [
            "void k_object_access_grant",
            "const void *object,\n\t\t\t\t     struct k_thread *thread"
        ],
        "kobject.h"
    ],
    [
        [
            "void k_object_release",
            "const void *object"
        ],
        "kobject.h"
    ],
    [
        [
            "void *k_object_alloc",
            "enum k_objects otype"
        ],
        "kobject.h"
    ],
    [
        [
            "int zephyr_read_stdin",
            "char *buf, int nbytes"
        ],
        "libc-hooks.h"
    ],
    [
        [
            "int zephyr_write_stdout",
            "const void *buf, int nbytes"
        ],
        "libc-hooks.h"
    ],
    [
        [
            "int zephyr_fputc",
            "int c, FILE * stream"
        ],
        "libc-hooks.h"
    ],
    [
        [
            "size_t zephyr_fwrite",
            "const void *ZRESTRICT ptr, size_t size,\n\t\t\t\tsize_t nitems, FILE *ZRESTRICT stream"
        ],
        "libc-hooks.h"
    ],
    [
        [
            "void k_mem_paging_stats_get",
            "struct k_mem_paging_stats_t *stats"
        ],
        "mem_manage.h"
    ],
    [
        [
            "void k_mem_paging_thread_stats_get",
            "struct k_thread *thread,\n\t\t\t\t   struct k_mem_paging_stats_t *stats"
        ],
        "mem_manage.h"
    ],
    [
        [
            "void k_mem_paging_histogram_eviction_get",
            "\n\tstruct k_mem_paging_histogram_t *hist"
        ],
        "mem_manage.h"
    ],
    [
        [
            "void k_mem_paging_histogram_backing_store_page_in_get",
            "\n\tstruct k_mem_paging_histogram_t *hist"
        ],
        "mem_manage.h"
    ],
    [
        [
            "void k_mem_paging_histogram_backing_store_page_out_get",
            "\n\tstruct k_mem_paging_histogram_t *hist"
        ],
        "mem_manage.h"
    ],
    [
        [
            "int z_sys_mutex_kernel_lock",
            "struct sys_mutex *mutex,\n\t\t\t\t      k_timeout_t timeout"
        ],
        "mutex.h"
    ],
    [
        [
            "int z_sys_mutex_kernel_unlock",
            "struct sys_mutex *mutex"
        ],
        "mutex.h"
    ],
    [
        [
            "int sys_clock_hw_cycles_per_sec_runtime_get",
            "void"
        ],
        "time_units.h"
    ]
]