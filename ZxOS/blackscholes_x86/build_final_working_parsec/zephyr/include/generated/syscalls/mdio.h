
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_MDIO_H
#define Z_INCLUDE_SYSCALLS_MDIO_H


#include <tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#include <linker/sections.h>


#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic push
#endif

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#if !defined(__XCC__)
#pragma GCC diagnostic ignored "-Warray-bounds"
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_mdio_bus_enable(const struct device * dev);

__pinned_func
static inline void mdio_bus_enable(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_MDIO_BUS_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_mdio_bus_enable(dev);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define mdio_bus_enable(dev) do { 	sys_port_trace_syscall_enter(K_SYSCALL_MDIO_BUS_ENABLE, mdio_bus_enable, dev); 	mdio_bus_enable(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_MDIO_BUS_ENABLE, mdio_bus_enable, dev); } while(false)
#endif
#endif


extern void z_impl_mdio_bus_disable(const struct device * dev);

__pinned_func
static inline void mdio_bus_disable(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_MDIO_BUS_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_mdio_bus_disable(dev);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define mdio_bus_disable(dev) do { 	sys_port_trace_syscall_enter(K_SYSCALL_MDIO_BUS_DISABLE, mdio_bus_disable, dev); 	mdio_bus_disable(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_MDIO_BUS_DISABLE, mdio_bus_disable, dev); } while(false)
#endif
#endif


extern int z_impl_mdio_read(const struct device * dev, uint8_t prtad, uint8_t devad, uint16_t * data);

__pinned_func
static inline int mdio_read(const struct device * dev, uint8_t prtad, uint8_t devad, uint16_t * data)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&prtad, *(uintptr_t *)&devad, *(uintptr_t *)&data, K_SYSCALL_MDIO_READ);
	}
#endif
	compiler_barrier();
	return z_impl_mdio_read(dev, prtad, devad, data);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define mdio_read(dev, prtad, devad, data) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_MDIO_READ, mdio_read, dev, prtad, devad, data); 	retval = mdio_read(dev, prtad, devad, data); 	sys_port_trace_syscall_exit(K_SYSCALL_MDIO_READ, mdio_read, dev, prtad, devad, data, retval); 	retval; })
#endif
#endif


extern int z_impl_mdio_write(const struct device * dev, uint8_t prtad, uint8_t devad, uint16_t data);

__pinned_func
static inline int mdio_write(const struct device * dev, uint8_t prtad, uint8_t devad, uint16_t data)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&prtad, *(uintptr_t *)&devad, *(uintptr_t *)&data, K_SYSCALL_MDIO_WRITE);
	}
#endif
	compiler_barrier();
	return z_impl_mdio_write(dev, prtad, devad, data);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define mdio_write(dev, prtad, devad, data) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_MDIO_WRITE, mdio_write, dev, prtad, devad, data); 	retval = mdio_write(dev, prtad, devad, data); 	sys_port_trace_syscall_exit(K_SYSCALL_MDIO_WRITE, mdio_write, dev, prtad, devad, data, retval); 	retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic pop
#endif

#endif
#endif /* include guard */
